{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"express\"","webpack:///external \"dotenv\"","webpack:///external \"mongodb\"","webpack:///./src/Services/DatabaseService.ts","webpack:///./src/Services/DialCodesPriceRateService.ts","webpack:///./src/Routes/DialCodesPriceRateRoute.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","telzirDatabase","connect","uri","MongoClient","useUnifiedTopology","getTelzirDatabase","DatabaseService","telzirDatabaseName","getPriceRateTableData","database","collection","DialCodesPriceRateService","collectionName","find","toArray","router","Router","_","res","process","env","DB_URI","client","db","send","console","error","status","config","expressApp","use","static","json","DialCodesPriceRateRoute","listen","log","main"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"express\");","module.exports = require(\"dotenv\");","module.exports = require(\"mongodb\");","import MongoDB from \"mongodb\";\r\n\r\nlet telzirDatabase : MongoDB.MongoClient;\r\n\r\n/**\r\n * Mediates database interaction.\r\n */\r\nexport default class DatabaseService\r\n{\r\n  /**\r\n   * Connects to a database and returns client.\r\n   * \r\n   * Pre Conditions:\r\n   * - Connection must be successful.\r\n   */\r\n  public static async connect(uri : string) : Promise<MongoDB.MongoClient>\r\n  {\r\n    const mongoClient = new MongoDB.MongoClient(\r\n      uri,\r\n      { useUnifiedTopology: true }\r\n    );\r\n\r\n    return await mongoClient.connect();\r\n  }\r\n\r\n  /**\r\n   * Returns instance of telzir database connection.\r\n   * \r\n   * Acts as a singleton always returning the same instance.\r\n   * \r\n   * Pre Conditions:\r\n   * - Connection must be successful.\r\n   */\r\n  public static async getTelzirDatabase(uri : string) : Promise<MongoDB.MongoClient>\r\n  {\r\n    if(!telzirDatabase)\r\n    {\r\n      telzirDatabase = await DatabaseService.connect(uri);\r\n    }\r\n\r\n    return telzirDatabase;\r\n  }\r\n\r\n  public static telzirDatabaseName = \"telzir\";\r\n}","import MongoDB from \"mongodb\";\r\n\r\n/**\r\n * Mediates interaction with database regarding\r\n * dial codes price rates.\r\n */\r\nexport default class DialCodesPriceRateService\r\n{\r\n  /**\r\n   * Retrieves price rate table data.\r\n   * \r\n   * Pre Conditions:\r\n   * - Must receive appropriate response from database.\r\n   */\r\n  public static async getPriceRateTableData(database : MongoDB.Db) : Promise<unknown>\r\n  {\r\n    return await database.collection(DialCodesPriceRateService.collectionName).find({}).toArray();\r\n  }\r\n\r\n  public static collectionName = \"DialCodesPriceTableData\";\r\n}","import express from \"express\";\r\nimport DialCodesPriceRateService from \"../Services/DialCodesPriceRateService\";\r\nimport DatabaseService from \"../Services/DatabaseService\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/\", async (_, res) =>\r\n{\r\n  try\r\n  {\r\n    const client = await DatabaseService.getTelzirDatabase(process.env.DB_URI!);\r\n    const database = client.db(DatabaseService.telzirDatabaseName);\r\n    res.send(await DialCodesPriceRateService.getPriceRateTableData(database));\r\n  }\r\n  catch(error)\r\n  {\r\n    console.error(error);\r\n    res.status(500).send({error});\r\n  }\r\n});\r\n\r\nexport default router;","import dotenv from \"dotenv\";\r\nimport express from \"express\";\r\nimport DatabaseService from \"./Services/DatabaseService\";\r\nimport DialCodesPriceRateRoute from \"./Routes/DialCodesPriceRateRoute\";\r\n\r\nasync function main() : Promise<void>\r\n{\r\n  //Initialization\r\n  dotenv.config();\r\n  try\r\n  {\r\n    await DatabaseService.getTelzirDatabase(process.env.DB_URI!);\r\n  }\r\n  catch(error)\r\n  {\r\n    console.error(error);\r\n  }\r\n\r\n  const expressApp = express();\r\n  expressApp.use(express.static(\"public\"));\r\n  expressApp.use(express.json());\r\n  expressApp.use(\"/dialCodesPriceRate\", DialCodesPriceRateRoute);\r\n\r\n  expressApp.listen(3000 || process.env.PORT, () =>\r\n  {\r\n    console.log(\"Server up!\");\r\n  });\r\n}\r\n\r\nmain();\r\n"],"sourceRoot":""}