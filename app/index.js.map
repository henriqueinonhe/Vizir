{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Routers/DialCodesPriceRateRouter.ts","webpack:///./src/Routers/UsageDataReportRouter.ts","webpack:///./src/Services/DatabaseService.ts","webpack:///./src/Services/DialCodesPriceRateService.ts","webpack:///./src/Services/UsageDataReportService.ts","webpack:///./src/index.ts","webpack:///external \"compression\"","webpack:///external \"crypto\"","webpack:///external \"dotenv\"","webpack:///external \"express\"","webpack:///external \"mongodb\""],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import express from \"express\";\r\nimport DialCodesPriceRateService from \"../Services/DialCodesPriceRateService\";\r\nimport DatabaseService from \"../Services/DatabaseService\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/\", async (_, res) =>\r\n{\r\n  try\r\n  {\r\n    const client = await DatabaseService.getTelzirDatabase(process.env.DB_URI!);\r\n    const database = client.db(DatabaseService.telzirDatabaseName);\r\n    res.send(await DialCodesPriceRateService.getPriceRateTableData(database));\r\n  }\r\n  catch(error)\r\n  {\r\n    console.error(error);\r\n    res.status(500).send({error});\r\n  }\r\n});\r\n\r\nexport default router;","import express from \"express\";\r\nimport UsageDataReportService from \"../Services/UsageDataReportService\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/\", async (req, res) =>\r\n{\r\n  const clientIp = req.ip;\r\n  const { fromDialCode, toDialCode, dialLength, faleMaisPlan } = req.body;\r\n\r\n  try\r\n  {\r\n    await UsageDataReportService.storeUsageData(clientIp, \r\n                                                fromDialCode, \r\n                                                toDialCode, \r\n                                                dialLength, \r\n                                                faleMaisPlan);\r\n    res.status(201).send({fromDialCode, toDialCode, dialLength, faleMaisPlan});\r\n  }\r\n  catch(error)\r\n  {\r\n    res.status(500).send({error});\r\n  }\r\n});\r\n\r\nexport default router;","import MongoDB from \"mongodb\";\r\n\r\nlet telzirDatabase : MongoDB.MongoClient;\r\n\r\n/**\r\n * Mediates database interaction.\r\n */\r\nexport default class DatabaseService\r\n{\r\n  /**\r\n   * Connects to a database and returns client.\r\n   * \r\n   * Pre Conditions:\r\n   * - Connection must be successful.\r\n   */\r\n  public static async connect(uri : string) : Promise<MongoDB.MongoClient>\r\n  {\r\n    const mongoClient = new MongoDB.MongoClient(\r\n      uri,\r\n      { useUnifiedTopology: true }\r\n    );\r\n\r\n    return await mongoClient.connect();\r\n  }\r\n\r\n  /**\r\n   * Returns instance of telzir database connection.\r\n   * \r\n   * Acts as a singleton always returning the same instance.\r\n   * \r\n   * Pre Conditions:\r\n   * - Connection must be successful.\r\n   */\r\n  public static async getTelzirDatabase(uri : string) : Promise<MongoDB.MongoClient>\r\n  {\r\n    if(!telzirDatabase)\r\n    {\r\n      telzirDatabase = await DatabaseService.connect(uri);\r\n    }\r\n\r\n    return telzirDatabase;\r\n  }\r\n\r\n  public static telzirDatabaseName = \"telzir\";\r\n}","import MongoDB from \"mongodb\";\r\n\r\n/**\r\n * Mediates interaction with database regarding\r\n * dial codes price rates.\r\n */\r\nexport default class DialCodesPriceRateService\r\n{\r\n  /**\r\n   * Retrieves price rate table data.\r\n   * \r\n   * Pre Conditions:\r\n   * - Must receive appropriate response from database.\r\n   */\r\n  public static async getPriceRateTableData(database : MongoDB.Db) : Promise<unknown>\r\n  {\r\n    return await database.collection(DialCodesPriceRateService.collectionName).find({}).toArray();\r\n  }\r\n\r\n  public static collectionName = \"DialCodesPriceRateTableData\";\r\n}","import crypto from \"crypto\";\r\nimport DatabaseService from \"./DatabaseService\";\r\n\r\n/**\r\n * App usage data reporting.\r\n */\r\nexport default class UsageDataReportService\r\n{\r\n  /**\r\n   * Stores usage data in the database.\r\n   * \r\n   * Client Ip is stored as a hash to\r\n   * ensure anonymization. \r\n   * \r\n   * As we don't really need a cryptographic hash \r\n   * algorithm, SHA1 is being used as it is\r\n   * inexpensive in computational terms.\r\n   * \r\n   * Pre Conditions:\r\n   * - Must connect successfully to database.\r\n   * \r\n   * @param clientIp \r\n   * @param fromDialCode \r\n   * @param toDialCode \r\n   * @param dialLength \r\n   * @param faleMaisPlan \r\n   */\r\n  public static async storeUsageData(clientIp : string, fromDialCode : string, toDialCode : string, dialLength : string, faleMaisPlan : string) : Promise<void>\r\n  {\r\n    const timestamp = new Date().toISOString();\r\n    const hashedClientIp = crypto.createHash(\"sha1\").update(clientIp).digest(\"hex\");\r\n    const data = {timestamp, hashedClientIp, fromDialCode, toDialCode, dialLength, faleMaisPlan};\r\n    const client = await DatabaseService.getTelzirDatabase(process.env.DB_URI!);\r\n    const database = client.db(DatabaseService.telzirDatabaseName);\r\n    await database.collection(UsageDataReportService.usageDataCollectionName).insertOne(data);\r\n  }\r\n\r\n  public static readonly usageDataCollectionName = \"usageData\";\r\n}\r\n\r\n","import dotenv from \"dotenv\";\r\nimport express from \"express\";\r\nimport DatabaseService from \"./Services/DatabaseService\";\r\nimport DialCodesPriceRateRouter from \"./Routers/DialCodesPriceRateRouter\";\r\nimport UsageDataReportRouter from \"./Routers/UsageDataReportRouter\";\r\nimport compression from \"compression\";\r\n\r\nasync function main() : Promise<void>\r\n{\r\n  //Initialization\r\n  dotenv.config();\r\n  try\r\n  {\r\n    await DatabaseService.getTelzirDatabase(process.env.DB_URI!);\r\n  }\r\n  catch(error)\r\n  {\r\n    console.error(error);\r\n  }\r\n\r\n  const expressApp = express();\r\n  expressApp.use(express.static(\"public\"));\r\n  expressApp.use(express.json());\r\n  expressApp.use(compression());\r\n  expressApp.use(\"/dialCodesPriceRate\", DialCodesPriceRateRouter);\r\n  expressApp.use(\"/usageData\", UsageDataReportRouter);\r\n  expressApp.listen(process.env.PORT || 3000, () =>\r\n  {\r\n    console.log(\"Server up!\");\r\n  });\r\n}\r\n\r\nmain();\r\n","module.exports = require(\"compression\");","module.exports = require(\"crypto\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"mongodb\");"],"sourceRoot":""}